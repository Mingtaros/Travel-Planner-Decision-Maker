{
    "is_feasible": [
        "# Check if the total cost is within the budget\nif self.get_total_cost() > self.problem.budget:\n    return False\n\n# Ensure that only free attractions are included\nfor day in range(self.num_days):\n    for loc, _, _, _ in self.routes[day]:\n        if self.problem.locations[loc]['type'] == 'attraction' and self.problem.locations[loc].get('entrance_fee', 0) > 0:\n            return False"
    ],
    "is_feasible_insertion": [
        "# Check if the insertion keeps the total cost within the budget\nnew_cost, _ = self.get_cost_duration(day, location_idx, position, transport_mode)\nif self.get_total_cost() + new_cost > self.problem.budget:\n    return False\n\n# Ensure that only free attractions are considered for insertion\nif self.problem.locations[location_idx]['type'] == 'attraction' and self.problem.locations[location_idx].get('entrance_fee', 0) > 0:\n    return False"
    ]
}