{
    "is_feasible": [
        "# Check if the total cost is within the budget\nif self.get_total_cost() > self.problem.budget:\n    return False\n\n# Ensure that at least one spicy hawker meal is included\nspicy_hawker_included = any(\n    loc['type'] == 'hawker' and loc.get('spicy', False)\n    for day in self.routes\n    for loc, _, _, _ in day\n)\nif not spicy_hawker_included:\n    return False\n\n# Ensure that only free attractions are included\nfor day in self.routes:\n    for loc, _, _, _ in day:\n        if loc['type'] == 'attraction' and loc.get('cost', 0) > 0:\n            return False"
    ],
    "is_feasible_insertion": [
        "# Check if inserting this location keeps the total cost within the budget\nnew_cost = self.get_total_cost() + self.problem.locations[loc_idx]['cost']\nif new_cost > self.problem.budget:\n    return False\n\n# Ensure that inserting this location includes at least one spicy hawker meal\nif self.problem.locations[loc_idx]['type'] == 'hawker' and not self.problem.locations[loc_idx].get('spicy', False):\n    spicy_hawker_included = any(\n        loc['type'] == 'hawker' and loc.get('spicy', False)\n        for day in self.routes\n        for loc, _, _, _ in day\n    )\n    if not spicy_hawker_included:\n        return False\n\n# Ensure that only free attractions are considered for insertion\nif self.problem.locations[loc_idx]['type'] == 'attraction' and self.problem.locations[loc_idx].get('cost', 0) > 0:\n    return False"
    ]
}